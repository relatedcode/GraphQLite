// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name GraphQLite
import CryptoKit
import Foundation
@_exported import GraphQLite
import Network
import SQLite3
import Swift
import _Concurrency
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GQLNetwork : ObjectiveC.NSObject {
  public class func setup()
  public class func notReachable() -> Swift.Bool
  public class func isReachable() -> Swift.Bool
  public class func isCellular() -> Swift.Bool
  public class func isWiFi() -> Swift.Bool
  @objc deinit
}
public typealias GQLErrorCallback = (Swift.Error?) -> Swift.Void
public typealias GQLResultCallback = ([Swift.String : Any], Swift.Error?) -> Swift.Void
@objc public class GQLServer : ObjectiveC.NSObject {
  public init(HTTP linkHTTP: Swift.String, headers headersHTTP: [Swift.String : Swift.String] = [:])
  public init(WebSocket linkWebS: Swift.String, headers headersWebS: [Swift.String : Swift.String] = [:], wsprotocol: Swift.String? = nil)
  public init(HTTP linkHTTP: Swift.String, headers headersHTTP: [Swift.String : Swift.String] = [:], WebSocket linkWebS: Swift.String, headers headersWebS: [Swift.String : Swift.String] = [:], wsprotocol: Swift.String? = nil)
  public init(_ linkGQLite: Swift.String)
  public init(Hasura linkHasura: Swift.String, wsprotocol: Swift.String? = nil)
  public init(Hasura linkHasura: Swift.String, secret: Swift.String, wsprotocol: Swift.String? = nil)
  public init(Hasura linkHasura: Swift.String, headers: [Swift.String : Swift.String], wsprotocol: Swift.String? = nil)
  public init(AppSync linkAppS: Swift.String, key: Swift.String)
  @objc deinit
  public func connectAuth(_ callback: @escaping GraphQLite.GQLErrorCallback)
  public func sendAuth(_ query: Swift.String, _ variables: [Swift.String : Any], _ callback: @escaping GraphQLite.GQLResultCallback)
  public func connect(_ callback: @escaping GraphQLite.GQLErrorCallback)
  public func disconnect()
  public func send(_ query: Swift.String, _ variables: [Swift.String : Any], _ callback: @escaping GraphQLite.GQLResultCallback)
  public func query(_ query: Swift.String, _ variables: [Swift.String : Any], _ callback: @escaping GraphQLite.GQLResultCallback)
  public func mutation(_ query: Swift.String, _ variables: [Swift.String : Any], _ callback: @escaping GraphQLite.GQLResultCallback)
  public func subscription(_ query: Swift.String, _ variables: [Swift.String : Any], _ callback: @escaping GraphQLite.GQLResultCallback) -> Swift.String
  public func subscription(cancel callbackId: Swift.String, _ callback: @escaping GraphQLite.GQLErrorCallback)
}
@objc @_inheritsConvenienceInitializers public class GQLAuth0 : ObjectiveC.NSObject {
  public class func setup(_ domain: Swift.String, _ clientId: Swift.String, _ clientSecret: Swift.String, _ connection: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
extension GraphQLite.GQLAuth0 {
  public class func userId() -> Swift.String
}
extension GraphQLite.GQLAuth0 {
  public class func signIn(_ email: Swift.String, _ password: Swift.String, _ completion: @escaping (Swift.Error?) -> Swift.Void)
}
extension GraphQLite.GQLAuth0 {
  public class func signUp(_ email: Swift.String, _ password: Swift.String, _ completion: @escaping (Swift.Error?) -> Swift.Void)
}
extension GraphQLite.GQLAuth0 {
  public class func checkPassword(_ password: Swift.String, _ completion: @escaping (Swift.Error?) -> Swift.Void)
}
extension GraphQLite.GQLAuth0 {
  public class func updatePassword(_ password: Swift.String, _ completion: @escaping (Swift.Error?) -> Swift.Void)
}
extension GraphQLite.GQLAuth0 {
  public class func signOut()
}
@objc public class GQLStorage : ObjectiveC.NSObject {
  public init(AmazonS3 regionName: Swift.String, _ secretKey: Swift.String, _ accessKey: Swift.String)
  public func upload(_ bucket: Swift.String, _ key: Swift.String, _ data: Foundation.Data, completion: @escaping (Swift.Error?) -> Swift.Void)
  public func download(_ bucket: Swift.String, _ key: Swift.String, completion: @escaping (Foundation.Data?, Swift.Error?) -> Swift.Void)
  public func delete(_ bucket: Swift.String, _ key: Swift.String, completion: @escaping (Swift.Error?) -> Swift.Void)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class GQLAuth : ObjectiveC.NSObject {
  public class func setup(_ link: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
extension GraphQLite.GQLAuth {
  public class func userId() -> Swift.String
}
extension GraphQLite.GQLAuth {
  public class func login(_ email: Swift.String, _ password: Swift.String, _ completion: @escaping (Swift.Error?) -> Swift.Void)
  public class func logout(_ completion: @escaping (Swift.Error?) -> Swift.Void)
}
extension GraphQLite.GQLAuth {
  public class func create(_ email: Swift.String, _ password: Swift.String, _ completion: @escaping (Swift.Error?) -> Swift.Void)
  public class func update(_ email: Swift.String, _ password: Swift.String, _ completion: @escaping (Swift.Error?) -> Swift.Void)
}
extension GraphQLite.GQLAuth {
  public class func refresh(_ completion: @escaping ([Swift.String : Swift.String], Swift.Error?) -> Swift.Void)
}
extension GraphQLite.GQLAuth {
  public class func verify(_ completion: @escaping (Swift.Error?) -> Swift.Void)
}
public enum GQLObserverType {
  case insert
  case update
  case delete
  public static func == (a: GraphQLite.GQLObserverType, b: GraphQLite.GQLObserverType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias GQLObserverCallback = (Swift.String, Any) -> Swift.Void
@objc @_inheritsConvenienceInitializers public class GQLDatabase : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public init(file: Swift.String)
  public init(path: Swift.String)
  @objc deinit
}
extension GraphQLite.GQLDatabase {
  public func cleanupDatabase()
  public func createTable(_ table: Swift.String)
  public func dropTable(_ table: Swift.String)
}
extension GraphQLite.GQLDatabase {
  public func execute(_ sql: Swift.String)
  public func execute(_ sql: Swift.String, _ arguments: [Any])
  public func execute(_ sql: Swift.String, _ arguments: [Swift.String : Any])
}
extension GraphQLite.GQLDatabase {
  public func export(_ table: Swift.String, _ values: [Swift.String : Any]) -> [Swift.String : Any]
}
extension GraphQLite.GQLDatabase {
  public func insert(_ table: Swift.String, _ values: [Swift.String : Any], _ populate: Swift.Bool = false)
  public func insert(_ table: Swift.String, _ array: [[Swift.String : Any]], _ populate: Swift.Bool = false, _ completion: @escaping () -> Swift.Void = {})
}
extension GraphQLite.GQLDatabase {
  public func update(_ table: Swift.String, _ values: [Swift.String : Any])
  public func update(_ table: Swift.String, _ array: [[Swift.String : Any]], _ completion: @escaping () -> Swift.Void = {})
}
extension GraphQLite.GQLDatabase {
  public func insertUpdate(_ table: Swift.String, _ values: [Swift.String : Any], _ populate: Swift.Bool = false)
  public func insertUpdate(_ table: Swift.String, _ array: [[Swift.String : Any]], _ populate: Swift.Bool = false, _ completion: @escaping () -> Swift.Void = {})
}
extension GraphQLite.GQLDatabase {
  public func updateInsert(_ table: Swift.String, _ values: [Swift.String : Any], _ populate: Swift.Bool = false)
  public func updateInsert(_ table: Swift.String, _ array: [[Swift.String : Any]], _ populate: Swift.Bool = false, _ completion: @escaping () -> Swift.Void = {})
}
extension GraphQLite.GQLDatabase {
  public func updateOne(_ table: Swift.String, _ values: [Swift.String : Any], key: Any)
  public func updateAll(_ table: Swift.String, _ values: [Swift.String : Any], _ condition: Swift.String = "", order: Swift.String = "")
  public func updateAll(_ table: Swift.String, _ values: [Swift.String : Any], _ condition: Swift.String = "", order: Swift.String = "", limit: Swift.Int)
  public func updateAll(_ table: Swift.String, _ values: [Swift.String : Any], _ condition: Swift.String = "", order: Swift.String = "", limit: Swift.Int, offset: Swift.Int)
  public func updateAll(_ table: Swift.String, _ values: [Swift.String : Any], _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "")
  public func updateAll(_ table: Swift.String, _ values: [Swift.String : Any], _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "", limit: Swift.Int)
  public func updateAll(_ table: Swift.String, _ values: [Swift.String : Any], _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "", limit: Swift.Int, offset: Swift.Int)
  public func updateAll(_ table: Swift.String, _ values: [Swift.String : Any], _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "")
  public func updateAll(_ table: Swift.String, _ values: [Swift.String : Any], _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "", limit: Swift.Int)
  public func updateAll(_ table: Swift.String, _ values: [Swift.String : Any], _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "", limit: Swift.Int, offset: Swift.Int)
}
extension GraphQLite.GQLDatabase {
  public func deleteOne(_ table: Swift.String, key: Any)
  public func deleteAll(_ table: Swift.String, _ condition: Swift.String = "", order: Swift.String = "")
  public func deleteAll(_ table: Swift.String, _ condition: Swift.String = "", order: Swift.String = "", limit: Swift.Int)
  public func deleteAll(_ table: Swift.String, _ condition: Swift.String = "", order: Swift.String = "", limit: Swift.Int, offset: Swift.Int)
  public func deleteAll(_ table: Swift.String, _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "")
  public func deleteAll(_ table: Swift.String, _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "", limit: Swift.Int)
  public func deleteAll(_ table: Swift.String, _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "", limit: Swift.Int, offset: Swift.Int)
  public func deleteAll(_ table: Swift.String, _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "")
  public func deleteAll(_ table: Swift.String, _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "", limit: Swift.Int)
  public func deleteAll(_ table: Swift.String, _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "", limit: Swift.Int, offset: Swift.Int)
}
extension GraphQLite.GQLDatabase {
  public func fetchOne(_ table: Swift.String, key: Any) -> [Swift.String : Any]?
  public func fetchOne(_ table: Swift.String, _ condition: Swift.String = "", order: Swift.String = "") -> [Swift.String : Any]?
  public func fetchOne(_ table: Swift.String, _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "") -> [Swift.String : Any]?
  public func fetchOne(_ table: Swift.String, _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "") -> [Swift.String : Any]?
  public func fetchAll(_ table: Swift.String, _ condition: Swift.String = "", order: Swift.String = "") -> [[Swift.String : Any]]
  public func fetchAll(_ table: Swift.String, _ condition: Swift.String = "", order: Swift.String = "", limit: Swift.Int) -> [[Swift.String : Any]]
  public func fetchAll(_ table: Swift.String, _ condition: Swift.String = "", order: Swift.String = "", limit: Swift.Int, offset: Swift.Int) -> [[Swift.String : Any]]
  public func fetchAll(_ table: Swift.String, _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "") -> [[Swift.String : Any]]
  public func fetchAll(_ table: Swift.String, _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "", limit: Swift.Int) -> [[Swift.String : Any]]
  public func fetchAll(_ table: Swift.String, _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "", limit: Swift.Int, offset: Swift.Int) -> [[Swift.String : Any]]
  public func fetchAll(_ table: Swift.String, _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "") -> [[Swift.String : Any]]
  public func fetchAll(_ table: Swift.String, _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "", limit: Swift.Int) -> [[Swift.String : Any]]
  public func fetchAll(_ table: Swift.String, _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "", limit: Swift.Int, offset: Swift.Int) -> [[Swift.String : Any]]
}
extension GraphQLite.GQLDatabase {
  public func check(_ table: Swift.String, key: Any) -> Swift.Bool
  public func check(_ table: Swift.String, _ condition: Swift.String = "") -> Swift.Bool
  public func check(_ table: Swift.String, _ condition: Swift.String, _ arguments: [Any]) -> Swift.Bool
  public func check(_ table: Swift.String, _ condition: Swift.String, _ arguments: [Swift.String : Any]) -> Swift.Bool
}
extension GraphQLite.GQLDatabase {
  public func count(_ table: Swift.String, _ condition: Swift.String = "") -> Swift.Int
  public func count(_ table: Swift.String, _ condition: Swift.String, _ arguments: [Any]) -> Swift.Int
  public func count(_ table: Swift.String, _ condition: Swift.String, _ arguments: [Swift.String : Any]) -> Swift.Int
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GQLDate : ObjectiveC.NSObject {
  public class func custom(_ formatter: Foundation.DateFormatter)
  @objc deinit
}
extension GraphQLite.GQLDate {
  public class subscript(string: Swift.String) -> Foundation.Date {
    get
  }
  public class subscript(date: Foundation.Date) -> Swift.String {
    get
  }
  public class subscript(timestamp: Foundation.TimeInterval) -> Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class GQLPush : ObjectiveC.NSObject {
  public class func setup(_ appId: Swift.String, _ keyAPI: Swift.String)
  public class func token(_ deviceToken: Foundation.Data)
  public class func register(_ userId: Swift.String)
  public class func unregister()
  public class func send(_ chatId: Swift.String, _ userIds: [Swift.String], _ text: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol GQLObject {
  @objc static func primaryKey() -> Swift.String
  @objc optional static func encryptedColumns() -> [Swift.String]
}
extension GraphQLite.GQLObject {
  public static func table() -> Swift.String
  public func table() -> Swift.String
  public static func object() -> ObjectiveC.NSObject
}
extension GraphQLite.GQLObject {
  public static func create(_ values: [Swift.String : Any]) -> Self
}
extension GraphQLite.GQLObject {
  public func values(for names: [Swift.String]) -> [Swift.String : Any]
  public func values(except names: [Swift.String]) -> [Swift.String : Any]
  public func values() -> [Swift.String : Any]
}
extension GraphQLite.GQLObject {
  public func export(for names: [Swift.String]) -> [Swift.String : Any]
  public func export(except names: [Swift.String]) -> [Swift.String : Any]
  public func export() -> [Swift.String : Any]
}
extension GraphQLite.GQLObject {
  public func insert(_ db: GraphQLite.GQLDatabase)
  public func insertUpdate(_ db: GraphQLite.GQLDatabase)
}
extension GraphQLite.GQLObject {
  public func update(_ db: GraphQLite.GQLDatabase)
  public func updateInsert(_ db: GraphQLite.GQLDatabase)
}
extension GraphQLite.GQLObject {
  public static func updateOne(_ db: GraphQLite.GQLDatabase, _ values: [Swift.String : Any], key: Any)
  public static func updateAll(_ db: GraphQLite.GQLDatabase, _ values: [Swift.String : Any], _ condition: Swift.String = "", order: Swift.String = "")
  public static func updateAll(_ db: GraphQLite.GQLDatabase, _ values: [Swift.String : Any], _ condition: Swift.String = "", order: Swift.String = "", limit: Swift.Int)
  public static func updateAll(_ db: GraphQLite.GQLDatabase, _ values: [Swift.String : Any], _ condition: Swift.String = "", order: Swift.String = "", limit: Swift.Int, offset: Swift.Int)
  public static func updateAll(_ db: GraphQLite.GQLDatabase, _ values: [Swift.String : Any], _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "")
  public static func updateAll(_ db: GraphQLite.GQLDatabase, _ values: [Swift.String : Any], _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "", limit: Swift.Int)
  public static func updateAll(_ db: GraphQLite.GQLDatabase, _ values: [Swift.String : Any], _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "", limit: Swift.Int, offset: Swift.Int)
  public static func updateAll(_ db: GraphQLite.GQLDatabase, _ values: [Swift.String : Any], _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "")
  public static func updateAll(_ db: GraphQLite.GQLDatabase, _ values: [Swift.String : Any], _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "", limit: Swift.Int)
  public static func updateAll(_ db: GraphQLite.GQLDatabase, _ values: [Swift.String : Any], _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "", limit: Swift.Int, offset: Swift.Int)
}
extension GraphQLite.GQLObject {
  public func delete(_ db: GraphQLite.GQLDatabase)
  public static func deleteOne(_ db: GraphQLite.GQLDatabase, key: Any)
  public static func deleteAll(_ db: GraphQLite.GQLDatabase, _ condition: Swift.String = "", order: Swift.String = "")
  public static func deleteAll(_ db: GraphQLite.GQLDatabase, _ condition: Swift.String = "", order: Swift.String = "", limit: Swift.Int)
  public static func deleteAll(_ db: GraphQLite.GQLDatabase, _ condition: Swift.String = "", order: Swift.String = "", limit: Swift.Int, offset: Swift.Int)
  public static func deleteAll(_ db: GraphQLite.GQLDatabase, _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "")
  public static func deleteAll(_ db: GraphQLite.GQLDatabase, _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "", limit: Swift.Int)
  public static func deleteAll(_ db: GraphQLite.GQLDatabase, _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "", limit: Swift.Int, offset: Swift.Int)
  public static func deleteAll(_ db: GraphQLite.GQLDatabase, _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "")
  public static func deleteAll(_ db: GraphQLite.GQLDatabase, _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "", limit: Swift.Int)
  public static func deleteAll(_ db: GraphQLite.GQLDatabase, _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "", limit: Swift.Int, offset: Swift.Int)
}
extension GraphQLite.GQLObject {
  public static func fetchOne(_ db: GraphQLite.GQLDatabase, key: Any) -> Self?
  public static func fetchOne(_ db: GraphQLite.GQLDatabase, _ condition: Swift.String = "", order: Swift.String = "") -> Self?
  public static func fetchOne(_ db: GraphQLite.GQLDatabase, _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "") -> Self?
  public static func fetchOne(_ db: GraphQLite.GQLDatabase, _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "") -> Self?
  public static func fetchAll(_ db: GraphQLite.GQLDatabase, _ condition: Swift.String = "", order: Swift.String = "") -> [Self]
  public static func fetchAll(_ db: GraphQLite.GQLDatabase, _ condition: Swift.String = "", order: Swift.String = "", limit: Swift.Int) -> [Self]
  public static func fetchAll(_ db: GraphQLite.GQLDatabase, _ condition: Swift.String = "", order: Swift.String = "", limit: Swift.Int, offset: Swift.Int) -> [Self]
  public static func fetchAll(_ db: GraphQLite.GQLDatabase, _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "") -> [Self]
  public static func fetchAll(_ db: GraphQLite.GQLDatabase, _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "", limit: Swift.Int) -> [Self]
  public static func fetchAll(_ db: GraphQLite.GQLDatabase, _ condition: Swift.String, _ arguments: [Any], order: Swift.String = "", limit: Swift.Int, offset: Swift.Int) -> [Self]
  public static func fetchAll(_ db: GraphQLite.GQLDatabase, _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "") -> [Self]
  public static func fetchAll(_ db: GraphQLite.GQLDatabase, _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "", limit: Swift.Int) -> [Self]
  public static func fetchAll(_ db: GraphQLite.GQLDatabase, _ condition: Swift.String, _ arguments: [Swift.String : Any], order: Swift.String = "", limit: Swift.Int, offset: Swift.Int) -> [Self]
}
extension GraphQLite.GQLObject {
  public static func check(_ db: GraphQLite.GQLDatabase, key: Any) -> Swift.Bool
  public static func check(_ db: GraphQLite.GQLDatabase, _ condition: Swift.String = "") -> Swift.Bool
  public static func check(_ db: GraphQLite.GQLDatabase, _ condition: Swift.String, _ arguments: [Any]) -> Swift.Bool
  public static func check(_ db: GraphQLite.GQLDatabase, _ condition: Swift.String, _ arguments: [Swift.String : Any]) -> Swift.Bool
}
extension GraphQLite.GQLObject {
  public static func count(_ db: GraphQLite.GQLDatabase, _ condition: Swift.String = "") -> Swift.Int
  public static func count(_ db: GraphQLite.GQLDatabase, _ condition: Swift.String, _ arguments: [Any]) -> Swift.Int
  public static func count(_ db: GraphQLite.GQLDatabase, _ condition: Swift.String, _ arguments: [Swift.String : Any]) -> Swift.Int
}
extension GraphQLite.GQLObject {
  @discardableResult
  public static func createObserver(_ db: GraphQLite.GQLDatabase, _ type: GraphQLite.GQLObserverType, _ condition: Swift.String = "", callback: @escaping GraphQLite.GQLObserverCallback) -> Swift.String
  @discardableResult
  public static func createObserver(_ db: GraphQLite.GQLDatabase, _ types: [GraphQLite.GQLObserverType], _ condition: Swift.String = "", callback: @escaping GraphQLite.GQLObserverCallback) -> Swift.String
  public static func removeObserver(_ db: GraphQLite.GQLDatabase, _ observerId: Swift.String?)
  public static func removeObserver(_ db: GraphQLite.GQLDatabase, _ observerId: Swift.String)
}
public enum GQLQueryFormat {
  case original
  case escaped
  public static func == (a: GraphQLite.GQLQueryFormat, b: GraphQLite.GQLQueryFormat) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GQLQuery : ObjectiveC.NSObject {
  public class subscript(name: Swift.String, format: GraphQLite.GQLQueryFormat = .original) -> Swift.String {
    get
  }
  @objc deinit
}
@objc public class GQLSync : ObjectiveC.NSObject {
  public init(_ server: GraphQLite.GQLServer, auth: Swift.Bool = false, interval: Foundation.TimeInterval = 0.5)
  @objc deinit
}
extension GraphQLite.GQLSync {
  public func cleanup()
}
extension GraphQLite.GQLSync {
  public func lazy(_ queryName: Swift.String, _ variables: [Swift.String : Any], _ keyId: Any)
  public func steady(_ queryName: Swift.String, _ variables: [Swift.String : Any], _ keyId: Any)
  public func force(_ queryName: Swift.String, _ variables: [Swift.String : Any])
  public func forceAuth(_ queryName: Swift.String, _ variables: [Swift.String : Any])
  public func force(_ queryName: Swift.String, _ variables: [Swift.String : Any], _ callback: @escaping GraphQLite.GQLResultCallback)
  public func forceAuth(_ queryName: Swift.String, _ variables: [Swift.String : Any], _ callback: @escaping GraphQLite.GQLResultCallback)
}
public enum GQLDebugLevel {
  case none
  case error
  case all
  public static func == (a: GraphQLite.GQLDebugLevel, b: GraphQLite.GQLDebugLevel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class GQLDebug : ObjectiveC.NSObject {
  public class func level(_ debugLevel: GraphQLite.GQLDebugLevel)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class GQLCryptor : ObjectiveC.NSObject {
  public class func password(_ value: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
extension GraphQLite.GQLObserverType : Swift.Equatable {}
extension GraphQLite.GQLObserverType : Swift.Hashable {}
extension GraphQLite.GQLQueryFormat : Swift.Equatable {}
extension GraphQLite.GQLQueryFormat : Swift.Hashable {}
extension GraphQLite.GQLDebugLevel : Swift.Equatable {}
extension GraphQLite.GQLDebugLevel : Swift.Hashable {}
